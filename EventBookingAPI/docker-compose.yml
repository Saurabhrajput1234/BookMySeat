services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventbooking-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eventbooking}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Garima@1234}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - eventbooking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-eventbooking}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and SignalR backplane
  redis:
    image: redis:7-alpine
    container_name: eventbooking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventbooking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Event Booking API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eventbooking-api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ConnectionStrings__DefaultConnection=${CONNECTION_STRING}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-EventBookingAPI}
      - Jwt__Audience=${JWT_AUDIENCE:-EventBookingAPIUsers}
      - Jwt__ExpiresInMinutes=${JWT_EXPIRES_IN_MINUTES:-60}
      - Stripe__SecretKey=${STRIPE_SECRET_KEY}
      - Stripe__PublishableKey=${STRIPE_PUBLISHABLE_KEY}
      - SendGrid__ApiKey=${SENDGRID_API_KEY}
      - SendGrid__FromEmail=${SENDGRID_FROM_EMAIL}
      - Redis__ConnectionString=${REDIS_CONNECTION_STRING:-redis:6379}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventbooking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: eventbooking-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - eventbooking-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  eventbooking-network:
    driver: bridge